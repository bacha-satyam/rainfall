import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
weather=pd.read_csv('Sub Divisional Monthly Rainfall from 1901 to 2017.csv')
weather.head()
weather.tail()
weather.corr()
type(weather)
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
import seaborn as sb
from sklearn import preprocessing
weather.describe()
weather.isnull().sum()
weather=weather.fillna(np.mean(weather))
np.mean(weather)
weather.isnull().sum()
weather.info()
weather.shape
weather.groupby('SUBDIVISION').size()
plt.scatter(weather.ANNUAL,weather.DEC,color='r')
weather['JAN'].hist(bins=20)
weather['FEB'].hist(bins=20)
weather['MAR'].hist(bins=20)
weather['APR'].hist(bins=20)
weather['MAY'].hist(bins=20)
weather['JUN'].hist(bins=20)
weather['JUL'].hist(bins=20)
weather['AUG'].hist(bins=20)
weather['SEP'].hist(bins=20)
weather['OCT'].hist(bins=20)
weather['NOV'].hist(bins=20)
weather['DEC'].hist(bins=20)
weather['ANNUAL'].hist(bins=20)
d2=weather.drop(['SUBDIVISION','YEAR','ANNUAL','JF','MAM','JJAS','OND'],axis=1)
k=(d2.head().sum())
months=list(d2.head())
print(k)
s=0
for i in d2.sum():
    s=s+i
print('12 months')
prob=list(k/s)
print(prob)
max_rainfall=max(prob)
for i in range(len(months)):
    if prob[i]==max_rainfall:
        print("Max rainfall in",months[i])
min_rainfall=min(prob)
for i in range(len(months)):
    if prob[i]==min_rainfall:
        print("Min rainfall in",months[i])
x=weather.iloc[:,2:14]
x.head()
y=weather['ANNUAL'].values
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)
from sklearn.linear_model import LinearRegression
my_mlr=LinearRegression()
my_mlr.fit(x_train,y_train)
x_train.shape
my_mlr.coef_
my_mlr.intercept_
weather_pred=my_mlr.predict(x_test)
print(mean_squared_error(y_test,weather_pred))
print(np.sqrt(mean_squared_error(y_test,weather_pred)))
print(mean_absolute_error(y_test,weather_pred))
print(r2_score(y_test,weather_pred))
plt.scatter(weather_pred,y_test)
ex=[]
for i in y_test:
    if i>2000:
        ex.append("high")
    else:
        ex.append("low")
pred=[]
for i in weather_pred:
    if i>2000:
        pred.append("high")
    else:
        pred.append("low")
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
acc=accuracy_score(pred,ex)
matrix=confusion_matrix(pred,ex)
clas=classification_report(pred,ex)
print("accuracy",acc)
print("mtrix",matrix)
print("classification")
print(clas)
